
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Environmental` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Environmental
 * 
 */
export type EnvironmentalModel = runtime.Types.Result.DefaultSelection<Prisma.$EnvironmentalPayload>






export type EnvironmentalNullableCompositeFilter = {
  equals?: Prisma.EnvironmentalObjectEqualityInput | null
  is?: Prisma.EnvironmentalWhereInput | null
  isNot?: Prisma.EnvironmentalWhereInput | null
  isSet?: boolean
}

export type EnvironmentalOrderByInput = {
  energyAndEmissions?: Prisma.EnergyAndEmissionsOrderByInput
}

export type EnvironmentalNullableCreateEnvelopeInput = {
  set?: Prisma.EnvironmentalCreateInput | null
}

export type EnvironmentalNullableUpdateEnvelopeInput = {
  set?: Prisma.EnvironmentalCreateInput | null
  upsert?: Prisma.EnvironmentalUpsertInput
  unset?: boolean
}

export type EnvironmentalWhereInput = {
  AND?: Prisma.EnvironmentalWhereInput | Prisma.EnvironmentalWhereInput[]
  OR?: Prisma.EnvironmentalWhereInput[]
  NOT?: Prisma.EnvironmentalWhereInput | Prisma.EnvironmentalWhereInput[]
  energyAndEmissions?: Prisma.XOR<Prisma.EnergyAndEmissionsNullableCompositeFilter, Prisma.EnergyAndEmissionsObjectEqualityInput> | null
}

export type EnergyAndEmissionsObjectEqualityInput = {
  scope1?: number | null
  scope2?: number | null
  scope3Market?: number | null
  scope3Location?: number | null
  renewableEnergy?: number | null
  nonRenewableEnergy?: number | null
  climateDataCollectionMethod?: string | null
  climateDataUncertainty?: string | null
  reported: boolean
}

export type EnergyAndEmissionsCreateInput = {
  scope1?: number | null
  scope2?: number | null
  scope3Market?: number | null
  scope3Location?: number | null
  renewableEnergy?: number | null
  nonRenewableEnergy?: number | null
  climateDataCollectionMethod?: string | null
  climateDataUncertainty?: string | null
  reported?: boolean
}

export type EnvironmentalUpsertInput = {
  set: Prisma.EnvironmentalCreateInput | null
  update: Prisma.EnvironmentalUpdateInput
}

export type EnvironmentalUpdateInput = {
  energyAndEmissions?: Prisma.XOR<Prisma.EnergyAndEmissionsNullableUpdateEnvelopeInput, Prisma.EnergyAndEmissionsCreateInput> | null
}



export type EnvironmentalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  energyAndEmissions?: boolean | Prisma.EnergyAndEmissionsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["environmental"]>



export type EnvironmentalSelectScalar = {}

export type EnvironmentalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"energyAndEmissions", ExtArgs["result"]["environmental"]>
export type EnvironmentalInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $EnvironmentalPayload = {
  name: "Environmental"
  objects: {}
  scalars: {}
  composites: {
    energyAndEmissions: Prisma.$EnergyAndEmissionsPayload | null
  }
}

export type EnvironmentalGetPayload<S extends boolean | null | undefined | EnvironmentalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EnvironmentalPayload, S>





/**
 * Fields of the Environmental model
 */
export interface EnvironmentalFieldRefs {

}
    

// Custom InputTypes
/**
 * Environmental without action
 */
export type EnvironmentalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Environmental
   */
  select?: Prisma.EnvironmentalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Environmental
   */
  omit?: Prisma.EnvironmentalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnvironmentalInclude<ExtArgs> | null
}
