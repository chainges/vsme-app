
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Employees` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Employees
 * 
 */
export type EmployeesModel = runtime.Types.Result.DefaultSelection<Prisma.$EmployeesPayload>






export type EmployeesOrderByInput = {
  fullTimeEmployees?: Prisma.SortOrder
  partTimeEmployees?: Prisma.SortOrder
  tempEmployees?: Prisma.SortOrder
  reported?: Prisma.SortOrder
}

export type EmployeesNullableCompositeFilter = {
  equals?: Prisma.EmployeesObjectEqualityInput | null
  is?: Prisma.EmployeesWhereInput | null
  isNot?: Prisma.EmployeesWhereInput | null
  isSet?: boolean
}

export type EmployeesWhereInput = {
  AND?: Prisma.EmployeesWhereInput | Prisma.EmployeesWhereInput[]
  OR?: Prisma.EmployeesWhereInput[]
  NOT?: Prisma.EmployeesWhereInput | Prisma.EmployeesWhereInput[]
  fullTimeEmployees?: Prisma.IntNullableFilter<"Employees"> | number | null
  partTimeEmployees?: Prisma.IntNullableFilter<"Employees"> | number | null
  tempEmployees?: Prisma.IntNullableFilter<"Employees"> | number | null
  reported?: Prisma.BoolFilter<"Employees"> | boolean
}

export type EmployeesNullableUpdateEnvelopeInput = {
  set?: Prisma.EmployeesCreateInput | null
  upsert?: Prisma.EmployeesUpsertInput
  unset?: boolean
}

export type EmployeesUpsertInput = {
  set: Prisma.EmployeesCreateInput | null
  update: Prisma.EmployeesUpdateInput
}

export type EmployeesUpdateInput = {
  fullTimeEmployees?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  partTimeEmployees?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  tempEmployees?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  reported?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
  unset?: boolean
}



export type EmployeesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  fullTimeEmployees?: boolean
  partTimeEmployees?: boolean
  tempEmployees?: boolean
  reported?: boolean
}, ExtArgs["result"]["employees"]>



export type EmployeesSelectScalar = {
  fullTimeEmployees?: boolean
  partTimeEmployees?: boolean
  tempEmployees?: boolean
  reported?: boolean
}

export type EmployeesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"fullTimeEmployees" | "partTimeEmployees" | "tempEmployees" | "reported", ExtArgs["result"]["employees"]>

export type $EmployeesPayload = {
  name: "Employees"
  objects: {}
  scalars: {
    fullTimeEmployees: number | null
    partTimeEmployees: number | null
    tempEmployees: number | null
    reported: boolean
  }
  composites: {}
}

export type EmployeesGetPayload<S extends boolean | null | undefined | EmployeesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmployeesPayload, S>





/**
 * Fields of the Employees model
 */
export interface EmployeesFieldRefs {
  readonly fullTimeEmployees: Prisma.FieldRef<"Employees", 'Int'>
  readonly partTimeEmployees: Prisma.FieldRef<"Employees", 'Int'>
  readonly tempEmployees: Prisma.FieldRef<"Employees", 'Int'>
  readonly reported: Prisma.FieldRef<"Employees", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Employees without action
 */
export type EmployeesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employees
   */
  select?: Prisma.EmployeesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employees
   */
  omit?: Prisma.EmployeesOmit<ExtArgs> | null
}
