
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Ethics` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Ethics
 * 
 */
export type EthicsModel = runtime.Types.Result.DefaultSelection<Prisma.$EthicsPayload>






export type EthicsOrderByInput = {
  corruptionCases?: Prisma.SortOrder
  whistleBlowerReports?: Prisma.SortOrder
  reported?: Prisma.SortOrder
}

export type EthicsNullableCompositeFilter = {
  equals?: Prisma.EthicsObjectEqualityInput | null
  is?: Prisma.EthicsWhereInput | null
  isNot?: Prisma.EthicsWhereInput | null
  isSet?: boolean
}

export type EthicsWhereInput = {
  AND?: Prisma.EthicsWhereInput | Prisma.EthicsWhereInput[]
  OR?: Prisma.EthicsWhereInput[]
  NOT?: Prisma.EthicsWhereInput | Prisma.EthicsWhereInput[]
  corruptionCases?: Prisma.IntNullableFilter<"Ethics"> | number | null
  whistleBlowerReports?: Prisma.IntNullableFilter<"Ethics"> | number | null
  reported?: Prisma.BoolFilter<"Ethics"> | boolean
}

export type EthicsNullableUpdateEnvelopeInput = {
  set?: Prisma.EthicsCreateInput | null
  upsert?: Prisma.EthicsUpsertInput
  unset?: boolean
}

export type EthicsUpsertInput = {
  set: Prisma.EthicsCreateInput | null
  update: Prisma.EthicsUpdateInput
}

export type EthicsUpdateInput = {
  corruptionCases?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  whistleBlowerReports?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  reported?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type EthicsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  corruptionCases?: boolean
  whistleBlowerReports?: boolean
  reported?: boolean
}, ExtArgs["result"]["ethics"]>



export type EthicsSelectScalar = {
  corruptionCases?: boolean
  whistleBlowerReports?: boolean
  reported?: boolean
}

export type EthicsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"corruptionCases" | "whistleBlowerReports" | "reported", ExtArgs["result"]["ethics"]>

export type $EthicsPayload = {
  name: "Ethics"
  objects: {}
  scalars: {
    corruptionCases: number | null
    whistleBlowerReports: number | null
    reported: boolean
  }
  composites: {}
}

export type EthicsGetPayload<S extends boolean | null | undefined | EthicsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EthicsPayload, S>





/**
 * Fields of the Ethics model
 */
export interface EthicsFieldRefs {
  readonly corruptionCases: Prisma.FieldRef<"Ethics", 'Int'>
  readonly whistleBlowerReports: Prisma.FieldRef<"Ethics", 'Int'>
  readonly reported: Prisma.FieldRef<"Ethics", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Ethics without action
 */
export type EthicsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ethics
   */
  select?: Prisma.EthicsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ethics
   */
  omit?: Prisma.EthicsOmit<ExtArgs> | null
}
