
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Governance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Governance
 * 
 */
export type GovernanceModel = runtime.Types.Result.DefaultSelection<Prisma.$GovernancePayload>






export type GovernanceNullableCompositeFilter = {
  equals?: Prisma.GovernanceObjectEqualityInput | null
  is?: Prisma.GovernanceWhereInput | null
  isNot?: Prisma.GovernanceWhereInput | null
  isSet?: boolean
}

export type GovernanceOrderByInput = {
  ethics?: Prisma.EthicsOrderByInput
  finesAndPenalties?: Prisma.FinesAndPenaltiesOrderByInput
}

export type GovernanceNullableCreateEnvelopeInput = {
  set?: Prisma.GovernanceCreateInput | null
}

export type GovernanceNullableUpdateEnvelopeInput = {
  set?: Prisma.GovernanceCreateInput | null
  upsert?: Prisma.GovernanceUpsertInput
  unset?: boolean
}

export type GovernanceWhereInput = {
  AND?: Prisma.GovernanceWhereInput | Prisma.GovernanceWhereInput[]
  OR?: Prisma.GovernanceWhereInput[]
  NOT?: Prisma.GovernanceWhereInput | Prisma.GovernanceWhereInput[]
  ethics?: Prisma.XOR<Prisma.EthicsNullableCompositeFilter, Prisma.EthicsObjectEqualityInput> | null
  finesAndPenalties?: Prisma.XOR<Prisma.FinesAndPenaltiesNullableCompositeFilter, Prisma.FinesAndPenaltiesObjectEqualityInput> | null
}

export type EthicsObjectEqualityInput = {
  corruptionCases?: number | null
  whistleBlowerReports?: number | null
  reported: boolean
}

export type FinesAndPenaltiesObjectEqualityInput = {
  fnp: boolean
  description?: string | null
  reported: boolean
}

export type EthicsCreateInput = {
  corruptionCases?: number | null
  whistleBlowerReports?: number | null
  reported?: boolean
}

export type FinesAndPenaltiesCreateInput = {
  fnp?: boolean
  description?: string | null
  reported?: boolean
}

export type GovernanceUpsertInput = {
  set: Prisma.GovernanceCreateInput | null
  update: Prisma.GovernanceUpdateInput
}

export type GovernanceUpdateInput = {
  ethics?: Prisma.XOR<Prisma.EthicsNullableUpdateEnvelopeInput, Prisma.EthicsCreateInput> | null
  finesAndPenalties?: Prisma.XOR<Prisma.FinesAndPenaltiesNullableUpdateEnvelopeInput, Prisma.FinesAndPenaltiesCreateInput> | null
}



export type GovernanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ethics?: boolean | Prisma.EthicsDefaultArgs<ExtArgs>
  finesAndPenalties?: boolean | Prisma.FinesAndPenaltiesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["governance"]>



export type GovernanceSelectScalar = {}

export type GovernanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"ethics" | "finesAndPenalties", ExtArgs["result"]["governance"]>
export type GovernanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $GovernancePayload = {
  name: "Governance"
  objects: {}
  scalars: {}
  composites: {
    ethics: Prisma.$EthicsPayload | null
    finesAndPenalties: Prisma.$FinesAndPenaltiesPayload | null
  }
}

export type GovernanceGetPayload<S extends boolean | null | undefined | GovernanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GovernancePayload, S>





/**
 * Fields of the Governance model
 */
export interface GovernanceFieldRefs {

}
    

// Custom InputTypes
/**
 * Governance without action
 */
export type GovernanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Governance
   */
  select?: Prisma.GovernanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Governance
   */
  omit?: Prisma.GovernanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GovernanceInclude<ExtArgs> | null
}
