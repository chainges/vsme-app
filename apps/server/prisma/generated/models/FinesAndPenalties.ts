
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FinesAndPenalties` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FinesAndPenalties
 * 
 */
export type FinesAndPenaltiesModel = runtime.Types.Result.DefaultSelection<Prisma.$FinesAndPenaltiesPayload>






export type FinesAndPenaltiesOrderByInput = {
  fnp?: Prisma.SortOrder
  description?: Prisma.SortOrder
  reported?: Prisma.SortOrder
}

export type FinesAndPenaltiesNullableCompositeFilter = {
  equals?: Prisma.FinesAndPenaltiesObjectEqualityInput | null
  is?: Prisma.FinesAndPenaltiesWhereInput | null
  isNot?: Prisma.FinesAndPenaltiesWhereInput | null
  isSet?: boolean
}

export type FinesAndPenaltiesWhereInput = {
  AND?: Prisma.FinesAndPenaltiesWhereInput | Prisma.FinesAndPenaltiesWhereInput[]
  OR?: Prisma.FinesAndPenaltiesWhereInput[]
  NOT?: Prisma.FinesAndPenaltiesWhereInput | Prisma.FinesAndPenaltiesWhereInput[]
  fnp?: Prisma.BoolFilter<"FinesAndPenalties"> | boolean
  description?: Prisma.StringNullableFilter<"FinesAndPenalties"> | string | null
  reported?: Prisma.BoolFilter<"FinesAndPenalties"> | boolean
}

export type FinesAndPenaltiesNullableUpdateEnvelopeInput = {
  set?: Prisma.FinesAndPenaltiesCreateInput | null
  upsert?: Prisma.FinesAndPenaltiesUpsertInput
  unset?: boolean
}

export type FinesAndPenaltiesUpsertInput = {
  set: Prisma.FinesAndPenaltiesCreateInput | null
  update: Prisma.FinesAndPenaltiesUpdateInput
}

export type FinesAndPenaltiesUpdateInput = {
  fnp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reported?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type FinesAndPenaltiesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  fnp?: boolean
  description?: boolean
  reported?: boolean
}, ExtArgs["result"]["finesAndPenalties"]>



export type FinesAndPenaltiesSelectScalar = {
  fnp?: boolean
  description?: boolean
  reported?: boolean
}

export type FinesAndPenaltiesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"fnp" | "description" | "reported", ExtArgs["result"]["finesAndPenalties"]>

export type $FinesAndPenaltiesPayload = {
  name: "FinesAndPenalties"
  objects: {}
  scalars: {
    fnp: boolean
    description: string | null
    reported: boolean
  }
  composites: {}
}

export type FinesAndPenaltiesGetPayload<S extends boolean | null | undefined | FinesAndPenaltiesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FinesAndPenaltiesPayload, S>





/**
 * Fields of the FinesAndPenalties model
 */
export interface FinesAndPenaltiesFieldRefs {
  readonly fnp: Prisma.FieldRef<"FinesAndPenalties", 'Boolean'>
  readonly description: Prisma.FieldRef<"FinesAndPenalties", 'String'>
  readonly reported: Prisma.FieldRef<"FinesAndPenalties", 'Boolean'>
}
    

// Custom InputTypes
/**
 * FinesAndPenalties without action
 */
export type FinesAndPenaltiesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinesAndPenalties
   */
  select?: Prisma.FinesAndPenaltiesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinesAndPenalties
   */
  omit?: Prisma.FinesAndPenaltiesOmit<ExtArgs> | null
}
