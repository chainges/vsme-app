
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EnergyAndEmissions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EnergyAndEmissions
 * 
 */
export type EnergyAndEmissionsModel = runtime.Types.Result.DefaultSelection<Prisma.$EnergyAndEmissionsPayload>






export type EnergyAndEmissionsOrderByInput = {
  scope1?: Prisma.SortOrder
  scope2?: Prisma.SortOrder
  scope3Market?: Prisma.SortOrder
  scope3Location?: Prisma.SortOrder
  renewableEnergy?: Prisma.SortOrder
  nonRenewableEnergy?: Prisma.SortOrder
  climateDataCollectionMethod?: Prisma.SortOrder
  climateDataUncertainty?: Prisma.SortOrder
  reported?: Prisma.SortOrder
}

export type EnergyAndEmissionsNullableCompositeFilter = {
  equals?: Prisma.EnergyAndEmissionsObjectEqualityInput | null
  is?: Prisma.EnergyAndEmissionsWhereInput | null
  isNot?: Prisma.EnergyAndEmissionsWhereInput | null
  isSet?: boolean
}

export type EnergyAndEmissionsWhereInput = {
  AND?: Prisma.EnergyAndEmissionsWhereInput | Prisma.EnergyAndEmissionsWhereInput[]
  OR?: Prisma.EnergyAndEmissionsWhereInput[]
  NOT?: Prisma.EnergyAndEmissionsWhereInput | Prisma.EnergyAndEmissionsWhereInput[]
  scope1?: Prisma.FloatNullableFilter<"EnergyAndEmissions"> | number | null
  scope2?: Prisma.FloatNullableFilter<"EnergyAndEmissions"> | number | null
  scope3Market?: Prisma.FloatNullableFilter<"EnergyAndEmissions"> | number | null
  scope3Location?: Prisma.FloatNullableFilter<"EnergyAndEmissions"> | number | null
  renewableEnergy?: Prisma.FloatNullableFilter<"EnergyAndEmissions"> | number | null
  nonRenewableEnergy?: Prisma.FloatNullableFilter<"EnergyAndEmissions"> | number | null
  climateDataCollectionMethod?: Prisma.StringNullableFilter<"EnergyAndEmissions"> | string | null
  climateDataUncertainty?: Prisma.StringNullableFilter<"EnergyAndEmissions"> | string | null
  reported?: Prisma.BoolFilter<"EnergyAndEmissions"> | boolean
}

export type EnergyAndEmissionsNullableUpdateEnvelopeInput = {
  set?: Prisma.EnergyAndEmissionsCreateInput | null
  upsert?: Prisma.EnergyAndEmissionsUpsertInput
  unset?: boolean
}

export type EnergyAndEmissionsUpsertInput = {
  set: Prisma.EnergyAndEmissionsCreateInput | null
  update: Prisma.EnergyAndEmissionsUpdateInput
}

export type EnergyAndEmissionsUpdateInput = {
  scope1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  scope2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  scope3Market?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  scope3Location?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  renewableEnergy?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  nonRenewableEnergy?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  climateDataCollectionMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  climateDataUncertainty?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reported?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}



export type EnergyAndEmissionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  scope1?: boolean
  scope2?: boolean
  scope3Market?: boolean
  scope3Location?: boolean
  renewableEnergy?: boolean
  nonRenewableEnergy?: boolean
  climateDataCollectionMethod?: boolean
  climateDataUncertainty?: boolean
  reported?: boolean
}, ExtArgs["result"]["energyAndEmissions"]>



export type EnergyAndEmissionsSelectScalar = {
  scope1?: boolean
  scope2?: boolean
  scope3Market?: boolean
  scope3Location?: boolean
  renewableEnergy?: boolean
  nonRenewableEnergy?: boolean
  climateDataCollectionMethod?: boolean
  climateDataUncertainty?: boolean
  reported?: boolean
}

export type EnergyAndEmissionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"scope1" | "scope2" | "scope3Market" | "scope3Location" | "renewableEnergy" | "nonRenewableEnergy" | "climateDataCollectionMethod" | "climateDataUncertainty" | "reported", ExtArgs["result"]["energyAndEmissions"]>

export type $EnergyAndEmissionsPayload = {
  name: "EnergyAndEmissions"
  objects: {}
  scalars: {
    scope1: number | null
    scope2: number | null
    scope3Market: number | null
    scope3Location: number | null
    renewableEnergy: number | null
    nonRenewableEnergy: number | null
    climateDataCollectionMethod: string | null
    climateDataUncertainty: string | null
    reported: boolean
  }
  composites: {}
}

export type EnergyAndEmissionsGetPayload<S extends boolean | null | undefined | EnergyAndEmissionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EnergyAndEmissionsPayload, S>





/**
 * Fields of the EnergyAndEmissions model
 */
export interface EnergyAndEmissionsFieldRefs {
  readonly scope1: Prisma.FieldRef<"EnergyAndEmissions", 'Float'>
  readonly scope2: Prisma.FieldRef<"EnergyAndEmissions", 'Float'>
  readonly scope3Market: Prisma.FieldRef<"EnergyAndEmissions", 'Float'>
  readonly scope3Location: Prisma.FieldRef<"EnergyAndEmissions", 'Float'>
  readonly renewableEnergy: Prisma.FieldRef<"EnergyAndEmissions", 'Float'>
  readonly nonRenewableEnergy: Prisma.FieldRef<"EnergyAndEmissions", 'Float'>
  readonly climateDataCollectionMethod: Prisma.FieldRef<"EnergyAndEmissions", 'String'>
  readonly climateDataUncertainty: Prisma.FieldRef<"EnergyAndEmissions", 'String'>
  readonly reported: Prisma.FieldRef<"EnergyAndEmissions", 'Boolean'>
}
    

// Custom InputTypes
/**
 * EnergyAndEmissions without action
 */
export type EnergyAndEmissionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnergyAndEmissions
   */
  select?: Prisma.EnergyAndEmissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnergyAndEmissions
   */
  omit?: Prisma.EnergyAndEmissionsOmit<ExtArgs> | null
}
