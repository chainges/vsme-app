# Augment Agent Workflow Guidelines

*Last Updated: 2025-08-03*

## Overview
This document establishes the workflow for Augment Agent when working on the my-better-t-app project. It ensures consistency, maintains documentation alignment, and preserves project context across conversations.

## 1. Conversation Initialization Protocol

### Required Foundation Review (Execute in Order)
1. **Current State Assessment**
   - Read `Foundation/steering/current-state.md` to understand what actually exists
   - Read `Foundation/steering/MAIN.md` for core principles and coding standards
   - Read `Foundation/steering/tech.md` for technology stack details

2. **Epic Context (If Working on Specific Features)**
   - Identify relevant epic in `Foundation/specs/`
   - Read epic's `requirement.md` for goals and scope
   - Read epic's `design.md` for implementation approach
   - Read epic's `tasks.md` for current progress and next steps

3. **Architecture Context**
   - Read `Foundation/steering/structure.md` for project organization
   - Read relevant best practice documents based on work type:
     - `api-best-practices.md` for backend work
     - `ui-best-practices.md` for frontend work
     - `database-best-practices.md` for data layer work
     - `testing-best-practices.md` for test-related work

### Information Gathering Commands
```bash
# Always start with these commands after Foundation review
codebase-retrieval: "current implementation status of [specific area]"
git-commit-retrieval: "recent changes related to [work area]"
```

## 2. Development Workflow

### Before Making Any Code Changes
1. **Validate Current State**
   - Use `codebase-retrieval` to understand existing patterns
   - Check `Foundation/steering/current-state.md` accuracy
   - Identify any gaps between documentation and reality

2. **Plan with Task Management**
   - For complex work (>30 minutes), use task management tools
   - Break work into ~20-minute professional developer tasks
   - Reference epic `tasks.md` files for context

3. **Follow Established Patterns**
   - Respect existing code architecture and patterns
   - Follow `Foundation/steering/MAIN.md` coding standards
   - Use appropriate package managers (never edit package files directly)

### During Development
1. **Incremental Progress**
   - Make small, focused changes
   - Update task states as work progresses
   - Test changes immediately after implementation

2. **Documentation Alignment**
   - Update `Foundation/steering/current-state.md` when adding new features
   - Update epic `tasks.md` files when completing tasks
   - Note any deviations from planned design in epic `design.md`

## 3. Documentation Maintenance Protocol

### When to Update Foundation Documents

#### `Foundation/steering/current-state.md`
- **Add** new implemented features to "What Actually Exists"
- **Remove** items from "What Doesn't Exist Yet" when implemented
- **Update** environment setup status when configuration changes
- **Revise** "Next Logical Steps" based on current progress

#### Epic `tasks.md` Files
- **Mark complete** when tasks are finished and tested
- **Add new tasks** when scope expands or issues are discovered
- **Update descriptions** when implementation differs from plan
- **Note blockers** when dependencies are discovered

#### Epic `design.md` Files
- **Document** significant architectural decisions made during implementation
- **Update** when technical approach changes from original plan
- **Add** lessons learned and implementation notes

#### Best Practice Documents
- **Add examples** of patterns successfully implemented
- **Update** when new tools or approaches are adopted
- **Document** common pitfalls discovered during development

### Documentation Update Triggers
- ✅ New feature implemented → Update `current-state.md`
- ✅ Task completed → Update epic `tasks.md`
- ✅ Architecture decision made → Update epic `design.md`
- ✅ New pattern established → Update relevant best-practices document
- ✅ Environment change → Update `current-state.md` environment section

## 4. Quality Assurance Checklist

### Before Completing Any Work
- [ ] Code follows `Foundation/steering/MAIN.md` standards
- [ ] Changes align with epic `design.md` approach
- [ ] Tests written and passing (suggest if not existing)
- [ ] Documentation updated to reflect current reality
- [ ] Task states updated in epic `tasks.md`
- [ ] `current-state.md` reflects new implementation status

### Code Quality Standards
- Use TypeScript strictly (no `any` types)
- Follow accessibility guidelines from MAIN.md
- Implement proper error handling patterns
- Use established project patterns and conventions
- Ensure mobile responsiveness for UI changes

## 5. Communication Guidelines

### With Users
- **Be Direct**: Skip flattery, provide actionable information
- **Be Conservative**: Ask before potentially damaging actions
- **Be Specific**: Reference exact files and line numbers when discussing code
- **Be Helpful**: Suggest testing and validation steps

### Documentation Style
- **Be Accurate**: Only document what actually exists
- **Be Specific**: Include exact commands, file paths, and examples
- **Be Current**: Always update timestamps when modifying documents
- **Be Actionable**: Provide clear next steps and commands

## 6. Emergency Protocols

### When Documentation is Inaccurate
1. Immediately note discrepancies in conversation
2. Update `current-state.md` to reflect reality
3. Investigate git history to understand when divergence occurred
4. Update related epic documentation if needed

### When Stuck or Going in Circles
1. Ask user for clarification or help
2. Review Foundation documents for missed context
3. Use `git-commit-retrieval` to find similar past solutions
4. Consider if task breakdown needs refinement

### When Major Architecture Changes are Needed
1. Document the need in epic `design.md`
2. Update epic `requirement.md` if scope changes
3. Get user approval before proceeding
4. Update multiple Foundation documents to maintain consistency

## 7. File Naming and Organization

### When Creating New Foundation Documents
- Use descriptive, hyphenated names (e.g., `new-feature-patterns.md`)
- Place in appropriate subdirectory (`specs/`, `steering/`, or `hooks/`)
- Include creation date and purpose in document header
- Reference from other relevant documents

### When Working with Epic Documentation
- Never create new epics without user direction
- Always work within existing epic structure
- Update all three files (`requirement.md`, `design.md`, `tasks.md`) when epic scope changes

## 8. Success Metrics

### Conversation Success Indicators
- Foundation documents consulted before major decisions
- Code changes align with documented patterns
- Documentation updated to reflect current state
- User receives accurate, actionable guidance
- Project maintains consistency across conversations

### Documentation Health Indicators
- `current-state.md` accurately reflects codebase
- Epic `tasks.md` files show clear progress
- Best practice documents contain working examples
- No contradictions between Foundation documents

---

*This document should be reviewed and updated as the project evolves and new patterns emerge.*
